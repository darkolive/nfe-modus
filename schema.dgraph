# Predicates (fields)
id: string @index(hash) .
email: string @index(exact) @upsert .
name: string .
did: string @index(exact) @upsert .
passwordHash: string .
passwordSalt: string .
recoveryHash: string .
emailVerified: datetime .
status: string @index(exact) .
verified: bool @index(bool) .
dateJoined: datetime @index(day) .
lastAuthTime: datetime @index(hour) .
marketingEmails: bool .
notificationEmails: bool .
credentialID: string @index(hash) .
publicKey: string .
counter: int .
transports: [string] .
lastChallenge: string .
lastUsed: datetime .
createdAt: datetime .
isBiometric: bool .
sessionToken: string @index(hash) @upsert .
expires: datetime .
userId: string @index(hash) .
type: string @index(hash) .
provider: string @index(hash) .
providerAccountId: string @index(hash) .
refresh_token: string .
access_token: string .
expires_at: int .
token_type: string .
scope: string .
id_token: string .
session_state: string .
identifier: string @index(hash) .
token: string @index(hash) @upsert .
challenge: string @index(hash) .
expiresAt: datetime .
description: string .
userDID: string @index(hash) .
deviceID: string .
message: string .
success: bool .
assertionData: string .  # Added missing predicate

# Relationships
devices: [uid] @reverse .
user: uid @reverse .
sessions: [uid] @reverse .
accounts: [uid] @reverse .
roles: [uid] @reverse .
users: [uid] @reverse .
permissions: [uid] @reverse .
preferences: uid @reverse .

# Type definitions
type User {
  id
  email
  name
  did
  passwordHash
  passwordSalt
  recoveryHash
  emailVerified
  status
  verified
  dateJoined
  lastAuthTime
  devices
  sessions
  accounts
  roles
  preferences
}

type UserPreferences {
  id
  marketingEmails
  notificationEmails
  user
}

type Device {
  id
  credentialID
  publicKey
  counter
  transports
  lastChallenge
  lastUsed
  createdAt
  name
  isBiometric
  user
}

type Session {
  id
  sessionToken
  userId
  expires
  user
}

type Account {
  id
  userId
  type
  provider
  providerAccountId
  refresh_token
  access_token
  expires_at
  token_type
  scope
  id_token
  session_state
  user
}

type VerificationToken {
  id
  identifier
  token
  expires
}

type Challenge {
  id
  challenge
  email
  userId
  createdAt
  expiresAt
}

type AuthenticationSession {
  id
  userDID
  token
  deviceID
  createdAt
  expiresAt
  user
}

type Role {
  id
  name
  description
  permissions
  users
}

type Permission {
  id
  name
  description
  roles
}

type StartAuthenticationRequest {
  email
}

type StartAuthenticationResponse {
  success
  message
  challenge
}

type VerifyPasskeyRequest {
  email
  deviceID
  assertionData
}

type VerifyPasskeyResponse {
  success
  message
  token
  user
}