type Query {
  generateOTP(req: GenerateOTPRequestInput!): GenerateOTPResponse!
  verifyOTP(req: VerifyOTPRequestInput!): VerifyOTPResponse!
  userTimestamps(req: GetUserTimestampsInput!): UserTimestamps!
  getUser(email: String!): User
}

input GenerateOTPRequestInput {
  email: String!
}

type GenerateOTPResponse {
  success: Boolean!
  message: String!
}

input VerifyOTPRequestInput {
  email: String!
  otp: String!
}

type VerifyOTPResponse {
  success: Boolean!
  message: String!
  token: String
  user: User
}

type User {
  id: ID!
  email: String! @id
  dateJoined: DateTime @index(day)!
  lastAuthTime: DateTime @index(hour)!
  status: String! @search
  verified: Boolean!
  otp: String @search
  otpCreatedAt: DateTime @index(hour)
  failedAttempts: Int
  lastOTPTime: DateTime
}

input GetUserTimestampsInput {
  email: String!
}

type UserTimestamps {
  dateJoined: DateTime!
  lastAuthTime: DateTime!
  daysSinceJoined: Int!
  lastSeenStatus: String!
  isActive: Boolean!
  status: String!
  failedAttempts: Int!
  lastOTPTime: DateTime!
}

scalar DateTime